C++ Boost 1.84.0

foreach >
    BOOST_FOREACH : <boost/foreach.hpp>
      It iterates over sequences for us,freeing us from having to deal directly with
      iterators or write predicates.
      Advantages :
        no dynamic allocations
        makes no virtual function calls or calls through function pointers
        makes no calls that are not transparent to the compiler's optimizer

      Syntax :
        BOOST_FOREACH(iterator, sequence)
        {
          ...  //  loop body
        }
        @iterator : <type> <id-expression>
                    everytime entered the loop body,@id-expression represents
                    the element in @sequence.
        @sequence : the sequence for loop.
                    if it is a function invocation,the return value must be
                    proper type and the function only be called once.

        //  if typeof(@iterator) != typeof(@element)
              convert type of @element to type of @iterator

        e.g.
          std::string hello("hello, world!");
          BOOST_FOREACH(char ch, hello)
          {
            std::cout << ch;
          }  //  hello, world!
  
          @ch : the object that Iterator refers to.
                @ch can be a predeclared variable.
          @hello : the target to BOOST_FOREACH
          { ... } : what to do for each @ch

      supported sequence types :
        stl containers
        arrays
        null-terminated strings(char and wchar_t)
        std::pair of iterators

      loop keywords is able to be used in the body of BOOST_FOREACH :
        return
        continue
        break
        /*  BOOST_FOREACH is a macro function implemented via "for-loop"  */

      BOOST_FOREACH is possible to be nested :
        e.g.
          std::vector<std::string> vs;
          ...
          BOOST_FOREACH(std::string s, vs)
          {
            ...
            BOOST_FOREACH(char ch, s)
            {
              ...
            }
            ...
          }

      !  use a C++ macro to define BOOST_FOREACH is possible but discourage,
         because that maybe cause name conflicts.
         #  i.e. Qt defined a macro named "foreach".

      BOOST_REVERSE_FOREACH(@iterator, @sequence) :
        iterating over collections in reverse order.

boost.iostreams >
    purpose :
      1>  make it easy to create standard C++ streams and stream buffers for
          accessing new sources and sinks
      2>  provide a framework for defining filters and attaching them to
          standard streams and stream buffers
      3>  provide a collection of ready-to-use filters,sources and sinks

    source:  provides read access to a sequence of characters
    sink:    provides write access to a sequence of characters
    inputfilter:  filters input read from a source
    outputfilter: filters output written to a sink
    devices:  refinements of sources and sinks
    filters:  refinements of inputfilter and outputfilter 

    class template stream_buffer and stream implement standard stream buffers
    and streams which perform i/o by delegating to a contained device.

    class template filterintg_streambuf and filtering_stream contain chains of
    filters and devices.

    Writing Devices :
      model the concept of the device to a class,
      transfer the class of the device to stream or stream_buffer as a template
      argument.
      e.g.
        #include<boost/iostreams/stream.hpp>
        #include<boost/iostreams/stream_buffer.hpp>
          class device_keyboard {
            ...
          };
          namespace io = boost::iostreams;

          //  stream_buffer<device_keyboard> inherits from 
          //  std::basic_streambuf and io::stream<device_keyboard>
          io::stream_buffer<device_keyboard> keyboard_io_streambuffer;

          //  stream<device_keyboard> inherits from std::basic_istream,
          //  std::basic_ostream or std::basic_iostream depending on the
          //  mode of @device_keyboard
          io::stream<device_keyboard> keyboard_io_stream;

      in practice,boost::iostreams::stream_buffer is more used frequently than
      boost::iostreams::stream,provides boost::iostreams::stream as a convenience.
      stream_buffer is able to be combined together with standard C++ io stream
      templates.
      e.g.
        boost::iostreams::stream_buffer<device_keyboard> keyboard_stream_buffer;
        keyboard_stream_buffer.open("/dev/input/by-id/usb-VENDOR_USB_Keyboard-event");
        ...
        std::istream input(&keyboard_stream_buffer);
        //  read from the keyboard.
        //  the underlying data source is stream_buffer @keyboard_stream_buffer
        //  thus read from @input is equivalence read from the keyboard.

      !!  boost iostreams provides the regular file type which is defined in
          <boost/iostreams/device/file.hpp> as a class template basic_file_source.
          using file_source = basic_file_source<char>;
          using wfile_source = basic_file_source<wchar_t>;

    Writing a container_source :
      in boost iostreams library,"source" means the device only support reading
      from it refuse writ into it.
      as the name,container_source is a "source" and the underlying data stream
      if come from a container.

      <boost/iostreams/categories.hpp>
        /*  source_tag - structure source_tag used as C++ trait to represents
         *               a "source".
         *  derive:      public {
         *                 @device_tag
         *                 @input 
         *               }
         */
        struct source_tag : device_tag, input {};

        e.g.
          class the_device {
          public:
            typedef source_tag category;
            ...
          };

          //  member type category indicates what the device is.
          //  @soure_tag means the device is a source,conversely,
          //  @sink_tag means the device is a sink.

      <boost/iostreams/concepts.hpp>
        /*  type-definition - specialization of class template @device with @input
         *                    is source type.
         */
        typedef device<input> source;

        e.g.
          //  C++ "is-a"
          class the_device : public source { ... };
        
          //  class @the_device is a "source".

      container_source :  //  device is type of source
        <boost/iostreams/categories.hpp>
        ...

        template<typename _TContainer>
        class container_source {
        public:
          typedef _TContainer::value_type char_type;
          typedef source_tag category;
          //  tell to boost iostreams library that class container_source
          //  is a model of "source".

          container_source(_TContainer &container);  //  constructor

          std::streamsize read(char_type *des, std::streamsize n);  //  read-op

        ...
        };

        template<typename _TContainer, typename _TDestination>
        std::streamsize getline(container_source<_TContainer> &src, _TDestination *des)
        {
          if (!des)
            return -1;
   
          //  member function source.getNextLineLength() maybe undefined,just provide a 
          //  abstract primitive on there.
          return src.read(des, src.getNextLineLength());
        }

        //  overload
        template<typename _TContainer>
        std::streamsize getline(container_source<_TContainer> &src, _TContainer &des)
        {
          ...
        }

        //  or use the library feature
        //    std::string input("Hello world");
        //    std::string output;
        //    
        //    //  stream on device container_source<string>
        //    boost::iostreams::stream<container_source<string>> in(input);
        //    getline(in, output);  //  libaray function
        //    

        !!  instances of boost::iterator_range can be added directly to
            filtering streams and stream buffers,thus there is a easier way
            to read from an STL container:
              e.g.
                <boost/iostreams/filtering_stream.hpp>
                <boost/range/iterator_range.hpp>
                <string>

                string input("Hello world");
                string output;

                //  combine boost iostreams filtering stream with
                //  boost iterator range.
                //  make an iterator,which moving in the range defined by @input.
                //  install the new iterator to filtering_istream object for replace
                //  the older one.
                boost::iostreams::filtering_istream in(boost::make_iterator_range(input));
                getline(in, output);

    Writing a container_sink :
      a sink is a device which support write operation only.
      
      <boost/iostreams/categories.hpp>
        //  sink_tag - tag used indicates that the device contains it
        //             is a sink.
        struct sink_tag : device_tag, output {};

        e.g.
          class the_device {
          public:
            typedef sink_tag category;
          ...
          };

      <boost/iostreams/concepts.hpp>
        //  type-definition - specialization of class template @device with
        //                    template parameter @output is a sink.
        //  #  class derived from this type is also a sink.
        typedef device<output> sink;

        e.g.
          class the_device : public sink {};

      container_sink :  //  device is type of sink

        //  the underlying container is specified by template parameter
        //  @_TContainer
        template<typename _TContainer>
        class container_sink {
        public:
          typdef _TContainer::value_type char_type;  //  character type
          typedef sink_tag category;  //  category of this device
                                      //  tell boost iostreams that the
                                      //  device container_sink is a
                                      //  model of Sink.

          container_sink(_TContainer &container);  //  constructor

          //  write - member function write,write characters from @s
          //          to the underlying container with size @n
          //  @src:   source data
          //  @n:     size to write
          //  return: size have been written
          //          -1  =>  EOF or other errror
          std::streamsize write(const char_type *src, std::streamsize n);
        };
        
        template<typename _TContainer, typename _TCharacter = char>
        std::streamsize operator<<(container_sink<_TContainer> &sink, const _TCharacter *src)
        {
          if (!src)
            return -1;
          return sink.write(src, strlen(src));
        }

        //  operator overload can not modify the basic rule of that operator.

        template<typename _TContainer>
        std::streamsize operator<<(container_sink<_TContainer> &sink, const _TContainer &source)
        {
          //  read_data just a primitive used to retrieve the real underlying buffer of @source
          return sink.write(source.real_data(), source.length());
        }

        //  or use the library feature
        //    std::string destination;
        //
        //    //  stream on device container_sink<std::string>.
        //    boost::iostreams::stream<container_sink<std::string>> out(destination);
        //    out << "Hello world";  //  read and write into @out
        //                           //  @out had been linked to @destination
        //                           //  operator<< overload provides by iostreams library
        //    out.flush();  //  flush

        !!  boost iostreams library provides buffering by default.

        !!  OutputIterators can be added directly
            to filtering streams and stream buffers of boost iostreams library.
            e.g.
              <iterator>
              <boost/iostreams/filtering_stream.hpp>

              string destination;       //  as underlying container
              
              //  construct an object is type of filtering_ostream,initialize it with
              //  a back_insert obtained from @destination
              boost::iostreams::filtering_ostream out(back_insert(destination));
              out << "Hello world";
              out.flush();

            //  <boost/iostreams/device/back_inserter.hpp> provides a back_inserter
            //  more efficient than C++ Standard Library back_inserter.
            //    boost::iostreams::back_inserter()

asio >
    Boost.Asio may be used to perform both synchronous and asynchronous operations
    on I/O objects.

    Synchronous operations :
      Program ->
      I/O Object ->
      I/O Execution Context ->
      Operating System
      <- Operating System
      <- I/O Execution Context
      <- I/O Object
         Program

    Asynchronous operations :
      Program -> {
        I/O Object
        Completion Handler
      }
      I/O Object ->
      I/O Execution Context ->
      Operating System
      <- Operating System
      <- I/O Eexcution Context
      <- Completion Handler
         Program

    I/O Object :
      the specific I/O object such socket,file,pipe, etc.
      e.g.
        boost::asio::ip::tcp::socket object

    I/O Execution Context :
      it represents the link of program to the operating system's I/O services.
      the program at least one I/O execution context,such as an
        boost::asio::io_context object
        boost::asio::thread_pool object
        boost::asio::system_context object

    Completion Handler :
      a function or function object with the signature 
        void <completion_handler_name>(const boost::system::error_code &);

    any request program initiates on a specific I/O object,the corresponding I/O Execution Context
    object will as an agent submits this request to Operating System.
    after the action for the request accmoplished by Operating System,it returns the result of the
    operation to I/O execution context.
    I/O Execution Context translates any error resulting from the operation into an object of
    type boost::system::error_code,the result is then forwarded back up to the I/O object.
    I/O object throws an exception of type boost::system::system_error if the operation failed.
    /*  Some overloaded version of action-methods does not throw an exception,as instead,such methods
     *  requires an object of type boost::system::system_error as the additional parameter.
     *  e.g.
     *    boost::asio::ip::tcp::socket s(boost::asio::io_context{});
     *    s.connect(server_endpoint);      //  throw
     *    boost::system::system_error ec;
     *    s.connect(server_endpoint, ec);  //  no throw
     */

    the advantage for boost.asio library that is :
      >  portability
           boost has different implementations to different Operating System
      >  scalability
           facilitate concurrent connections
      >  efficiency
           support some special techniques allow programs to minmise data copying
      >  model concepts from established APIs
           such BSD sockets
      >  ease of use
           it is complex but ease of to learn how to use them
      >  basis for further abstraction
           permit the development of other libraries that provide higher levels of abstraction

      /*  I figure that boost.asio is another wraper of POSIX.1 I/O APIs,the POSIX.1 I/O APIs
       *  are flexible to composing,feature require on demand.
       *  but even POSIX.1 is a standard about system features,might a special system does not
       *  support some particular features.
       *  and new to such OS have to learn the POSIX.1 features on that OS,it maybe spend a lot of
       *  times.
       *  another problem is resource manage,the object holds relative resource its lifetime is
       *  unclear,some resource have to be manually recycled by programmer.
       *  high-level abstract layer such boost.asio will eliminates the problems occurred on the
       *  low-level interace.
       *  e.g.
       *    POSIX.1 API :
       *      int socket = -1;
       *      errno = 0;
       *      socket = socket(AF_INET, SOCK_STREAM, IPPROT_TCP);
       *      if (socket < 0) {
       *              fprintf(stderr, "Failed to acquire a socket in tcp protocol.\n");
       *              exit(errno);
       *      }
       *      errno = 0;
       *      if (connect(socket, server_endpoint, server_endpoint_length) < 0) {
       *              fprintf(stderr, "Failed to establish connection with server.\n");
       *              exit(errno);
       *      }
       *      ...
       *      shutdown(socket, SHUT_RDWR);  //  if @socket is a local variable,and returned from
       *                                    //  a special worker but did not release the resource
       *                                    //  it represents,then the resource will be existing until
       *                                    //  program exit and recycled by kernel.
       *      ...
       *    
       *    Boost.Asio :
       *      boost::asio::ip::tcp::socket socket(boost::asio::io_context{});
       *      boost::system::system_error ec;
       *      socket.connect(server_endpoint, ec);
       *      ...
       *      //  connection will be released when the I/O object is destructing.(RAII)
       *      //  programmer need not to manage resource manually.
       *      //  programmer need not to learn about the low-level APIs on a specific system,just
       *      //  learn about APIs of boost.asio as well.
       */


SmartPtr >
    Boost.SmartPtr: The Smart Pointer Library

    smart pointer class templates:
      scoped_ptr:  used to contain ownership of a dynamically allocated object
                   to the current scope.
      scoped_array:  provides scoped ownership for a dynamically allocated array.
      shared_ptr:  a versatile tool for managing shared ownership of an object or
                   or array.
      weak_ptr:  a non-owning observer to a shared_ptr-managed object that can be
                 promoted temporarily to shared_ptr.
      intrusive_ptr:  a pointer to objects with an embedded reference count.
      local_shared_ptr:  providing shared ownership within a single thread.

      //  shared_ptr and weak_ptr are part of the C++ standard from C++11.

    utility functions and classes:
      make_shared(),allocate_shared():  factory functions for creating objects 
                                        that return a shared_ptr.
      make_unique():  factory function returning std::unique_ptr.
      allocate_unique():  factory function for creating objects using an allocator
                          that return a std::unique_ptr.
      enable_shared_from_this:  helper base class that enables the acquisition
                                of a shared_ptr pointing to this.
      enable_shared_from:  a newer and better replacement for enable_shared_from_this.
      pointer_to_other:  helper trait for converting one smart pointer type to
                         another.
      static_pointer_cast:  generic smart pointer casts.
      intrusive_ref_counter:  helper base class containing a reference count.
      atomic_shared_ptr:  helper class implementing the interface of std::atomic
                          for a value of type shared_ptr.

      !  the destructor or operator delete for an object managed by pointers in
         the library are not allowed to throw exceptions.

    scoped_ptr :
      scoped_ptr is a simple solution for simple needs,supplies a basic
      "resource acquisition is initialization" facility,without shared-ownership
      or transfer-of-ownership semantics.
      
      scoped_ptr - noncopyable
                   cannot be used in C++ Standard Library containers.
                   cannot correctly hold a pointer to a dynamically allocated array

      <boost/smart_ptr/scoped_ptr.hpp>
        namespace boost {
          template<class T>
          class scoped_ptr {
            ...
          };
        }
        
        element type :
          typedef T element_type;
        
        construct and destruct :
          explicit scoped_ptr(T *p = 0) noexcept;
  
          /*  the destructor or the operator delete of the object is type of T
           *  forbid throw exception.
           *  and T must be a complete type.(Succeed to constructed)
           */
          ~scoped_ptr() noexcept;
  
        member functions :
          /*  reset - member function reset @pointer to @p.
           *          the previous object pointed by @pointer
           *          will automatically freed.
           */
          void reset(T *p = 0) noexcept;
  
          /*  operator* - overload operator *  */
          T &operator*() const noexcept;
          
          /*  operator-> - overload member-accessing operator  */
          T *operator->() const noexcept;
  
          /*  get - returns the raw pointer.  */
          T *get() const noexcept;
  
          /*  operator bool - overload type converting,enforce explicit.  */
          explicit operator bool() const noexcept;
          
          /*  swap - swap two scoped_ptr objects.
           *  @b:    another,it will swap to this.
           */
          void swap(scoped_ptr &b) noexcept;
  
        free functions :
          template<class T>
          void swap(scoped_ptr<T> &a, scoped_ptr<T> &b) noexcept;
  
          template<class T>
          bool operator==(scoped_ptr<T> const &p, std::nullptr_t) noexcept;
      
          template<class T>
          bool operator==(std::nullptr_t, scoped_ptr<T> const &p) noexcept;
          
          template<class T>
          bool operator!=(scoped_ptr<T> const &p, std::nullptr_t) noexcept;
          
          template<class T>
          bool operator!=(std::nullptr_t, scoped_ptr<T> const &p) noexcept;
  
      e.g.
        void func(void)
        {
          boost::scoped_ptr<int> pInt(new int(10));  //  explicit construct.
          if (pInt == NULL)                   //  free function calls.
            throw std::abort();
        }  //  @pInt dead,and the memory of a int object with value 10 freed automatically.

      !!  the primary reason to use scoped_ptr rather than std::auto_ptr or std::unique_ptr
            1>  "resource acquisition is initialization" to be applied only for
                the current scope and have no intent to transfer ownership.
            2>  prevent a later maintenance programmer from adding a function
                that transfers ownership by returning the auto_ptr,because
                saw auto_ptr,and assumed ownership could safely be transferred.

    scoped_array :
      the scoped_array class template stores a pointer to a dynamically allocated array.
      it is similar to scoped_ptr,but it is designed for array.

      scoped_array - noncopyable
                     cannot be used in C++ standard library containers
                     cannot correctly hold a pointer to single object
                     no more space overhead than a built-in array pointer
      //  need an array in C++ standard library containers?
      //  see shared_ptr<T[]>

      !  std::vector is an alternative to scoped_array that is a bit heavier
         duty but far more flexible.
         boost::array is an alternative that does not use dynamic allocation.

      <boost/smart_ptr/scoped_array.hpp>
        namespace boost {
          template<class T>
          class scoped_array {
            ...
          };
        }
  
        element type :
          typedef T element_type;
  
        construct and destruct :
          /*  storing a copy of p,which must have been allocated via a
           *  C++ new[] expression or be 0.
           *  T is not required be a complete type.
           */
          explicit scoped_array(T *p = 0) noexcept;
  
          /*  T must be complete,and delete[] on the stored pointer must not
           *  throw exceptions.
           */
          ~scoped_array() noexcept;
  
        member functions :
          /*  reset - reset the internal array pointer to newer.
           *  @p:     the new array address with element type T.
           */
          void reset(T *p = 0) noexcept;
  
          /*  operator[] - overload random access operator.  */
          T &operator[](std::ptrdiff_t i) const noexcept;
  
          /*  get - get the raw array address.  */
          T *get() const noexcept;
  
          /*  operator bool - overload converting,enforce explicit calling.  */
          explicit operator bool() const noexcept;
  
          /*  swap - swap current array to another.
           *  @b:    referrence to a scoped_array object.
           *  #  T need not be a complete type.
           */
          void swap(scoped_array &b) noexcept;
  
        free functions :
          template<class T>
          void swap(scoped_array<T> &a, scoped_array<T> &b) noexcept;
  
          template<class T>
          bool operator==(scoped_array<T> const &p, std::nullptr_t) noexcept;
  
          template<class T>
          bool operator==(std::nullptr_t, scoped_array<T> const &p) noexcept;
  
          template<class T>
          bool operator!=(scoped_array<T> const &p, std::nullptr_t) noexcept;
  
          template<class T>
          bool operator!=(std::nullptr_t, scoped_array<T> const &p) noexcept;

      e.g.
        void func(void)
        {
          boost::scoped_array<int> paV(new int[5]);
          if (paV == nullptr)
            throw std::abort();
          paV[0] = 3;
        }

    shared_ptr :
      it is a class template stores a pointer to a dynamically allocated object.

      shared_ptr deletes the exact pointer that has been passed at construction
      time,complete with its original type,regardless of the template parameter.
      e.g.
        std::shared_ptr<void> p(new int(5));
        //  @p destruct,"delete __interPointer" __interPointer points to a
            int object with value 5 but it is type of void *.

      shared_ptr - copyconstructible
                   moveconstructible
                   copyassignable
                   moveassignable
                   can be used in standard library containers
                   comparison operators are supplied

      !  because the implementation uses reference counting,cycles of shared_ptr
         instances will not be reclaimed.
         e.g.
           struct A {
             std::shared_ptr<A> __interPointer;
             ...
           };

           void func(void)
           {
             A *pA = new A;
             std::shared_ptr<A> spA(pA);
             spA->__interPointer.reset(pA);
             //  A's use count will be 2.
             //  @spA destructed,A will be leaved dangling with a use count of 1.
             //  "weak_ptr" can "break cycles".
           }

      shared_ptr<T> can be implicitly converted to shared_ptr<U> whenever T*
      can be implicitly converted to U* .
      in particular,shared_ptr<T> is implicitly convertible to shared_ptr<T const>,
      to shared_ptr<U> where U is an accessible base of T,and to shared_ptr<void>.

      !  shared_ptr can be used to hold a pointer to a dynamically allocated array.
         this is accomplished by using an array type (T[] or T[N]) as the template
         parameter.
         if template-parameter = T[N]
           operator[] index range checking will be enabled.

      !  avoid using unnamed shared_ptr tempraries to save typing.

      <boost/smart_ptr/shared_ptr.hpp> "or <memory>  /*  C++11  */"
        namespace boost {
          class bad_weak_ptr : public std::exception;
          template<class T> class weak_ptr;
          template<class T>
          class shared_ptr {
            ...
          };
        }

        element type :
          /*  element_type is T when T is not an array type,and U when T
           *  is U[] or U[N].
           */
          typedef ... element_type;

        construct and destruct :
          /*  these two constructors construct an empty shared_ptr  */
          constexpr shared_ptr() noexcept;
          constexpr shared_ptr(std::nullptr_t) noexcept;

          /*  Y must be a complete type.
           *  delete p or delete[] p cannot throw exceptions.
           *  when T is U[N],Y(*)[N] must be convertible to T* ,
           *  when T is U[],Y(*)[] must be convertible to T*,
           *  otherwise,Y* must be convertible to T* .
           *  the constructor is a template in order to remember the 
           *  actual pointer type passed,the destructor will call delete with
           *  the same pointer,complete with its original type,even when
           *  T does not have a virtual destructor or is void.
           */
          template<class Y>
          explicit shared_ptr(Y *p);

          /*  unique_ptr constructor  */
          template<class Y, class D>
          shared_ptr(std::unique_ptr<Y, D> &&r);
          
          ...
          
          /*  if *this is empty,or shares ownership with another shared_ptr
           *  instance(use_count() > 1),there are no side effects.
           *  if *this owns a pointer p and a deleter d,d(p) is called.
           *  if *this owns a pointer p,and have no deleter d,delete p is called.
           */
          ~shared_ptr() noexcept;

        member functions :
          /*  reset - no parameter,do nothing.  */
          void reset() noexcept;

          /*  reset - reset internal pointer to a new pointer.
           *  @p:     the new pointer.
           */
          template<class Y>
          void reset(Y *p);

          /*  reset - reset internal pointer to new pointer and also
           *          replace deleter.
           *  @p:     new pointer.
           *  @d:     deleter.
           */
          template<class Y, class D>
          void reset(Y *p, D d);

          /*  operator* - overload pointer deref operator.  */
          T &operator*() const noexcept;

          /*  operator-> - overload member accessing operator.  */
          T *operator->() const noexcept;

          /*  operator[] - overload random accessing operator.  */
          element_type &operator[](std::ptrdiff_t i) const noexcept;

          /*  get - get the raw pointer.  */
          element_type *get() const noexcept;

          /*  unique - if use_count() == 1.  */
          bool unique() const noexcept;

          /*  use_count - return the number of local_shared_ptr objects,
           *              *this included,that share ownership with *this
           *              or 0 when *this is empty.
           */
          long use_count() const noexcept;

          /*  operator bool - overload bool converting and enforce explicit.  */
          explicit operator bool() const noexcept;

          /*  operator shared_ptr<Y> - convert T* to Y* .  */
          template<class Y>
          operator shared_ptr<Y>() const noexcept;

          /*  operator weak_ptr<Y> - returns a copy of the owned shared_ptr.
          template<class Y>
          operator weak_ptr<Y>() const noexcept;

          /*  swap - exchange *this to b.  */
          void swap(local_shared_ptr &b) noexcept;

          /*  owner_before - it be like of operator< .  */
          template<class Y>
          bool owner_before(shared_ptr<T> const &r) const noexcept;
          template<class Y>
          bool owner_before(weak_ptr<Y> const &r) const noexcept;

          /*  owner_equals - true if and only if *this and @r share ownership
           *                 or are both empty.
           */
          template<class Y>
          bool owner_equals(weak_ptr<Y> const &r);
          template<class Y>
          bool owner_equals(shared_ptr<Y> const &r) const noexcept;

          /*  owner_hash_value - returns an unspecified hash value such that
           *                     two instances that share ownership have the
           *                     same hash value.
           */
          std::size_t owner_hash_value() const noexcept;

        free functions :
          template<class T, class U>
          bool operator==(shared_ptr<T> const &a, shared_ptr<U> const &b) noexcept;
                                                  //  std::nullptr_t
                          //  std::nullptr_t

          template<class T, class U>
          bool operator!=(shared_ptr<T> const &a, shared_ptr<U> const &b) noexcept;
                                                  //  std::nullptr_t
                          //  std::nullptr_t

          template<class T, class U>
          bool operator<(shared_ptr<T> const &a, shared_ptr<U> const &b) noexcept;

          template<class T>  
          void swap(shared_ptr<T> &a, shared_ptr<T> &b) noexcept;

          template<class T>
          typename shared_ptr<T>element_type *
          get_pointer(shared_ptr<T> const &p) noexcept;

          template<class T, class U>
          shared_ptr<T> static_pointer_cast(shared_ptr<U> const &r) noexcept;

          template<class T, class U>
          shared_ptr<T> const_pointer_cast(shared_ptr<U> const &r) noexcept;

          template<class T, class U>
          shared_ptr<T> dynamic_pointer_cast(shared_ptr<U> const &r) noexcept;

          template<class T, class U>
          shared_ptr<T> reinterpret_pointer_cast(shared_ptr<U> const &r) noexcept;

          template<class E, class T, class Y>
          std::basic_ostream<E, T> &
          operator<<(std::basic_ostream<E, T> &os, shared_ptr<Y> const &p);

          template<class D, class T>
          D *get_deleter(shared_ptr<T> const &p) noexcept;

          //  atomic accessing
          template<class T>
          bool atomic_is_lock_free(shared_ptr<T> const *p) noexcept;

          template<class T>
          shared_ptr<T> atomic_load(shared_ptr<T> const *p) noexcept;
          template<class T>
          shared_ptr<T> atomic_load_explicit(shared_ptr<T> const *p, int) noexcept;

          template<class T>
          void atomic_store(shared_ptr<T> *p, shared_ptr<T> r) noexcept;
          template<class T>
          void atomic_store_explicit(shared_ptr<T> *p, shared_ptr<T> r, int) noexcept;

          template<class T>
          shared_ptr<T> atomic_exchange(shared_ptr<T> *p, shared_ptr<T> r) noexcept;
          template<class T>
          shared_ptr<T>
          atomic_exchange_explicit(shared_ptr<T> *p, shared_ptr<T> r, int) noexcept;

          template<class T>
          bool atomic_compare_exchange(shared_ptr<T> *p, shared_ptr<T> *v,
                                       shared_ptr<T> w) noexcept;
          template<class T>
          bool atomic_compare_exchange_explicit(shared_ptr<T> *p, shared_ptr<T> *v,
                                                shared_ptr<T> w) noexcept;

      e.g.
        void func(void)
        {
          //  these two statements call to copy-constructor.
          shared_ptr<int> pI0(make_shared<int>(3));
          auto pI1(pI0);
          //  use_count() == 2

          //  this statement call to move-constructor.
          shared_ptr<int> pIMoved(std::move(pI1));
          //  use_count() still equal to 2,but @pI1 is in undefined state.

          //  just one memory space for a int object had been allocated.
        }  //  all shared_ptr<int> instances will be destroyed before returns
           //  control to the caller,of couse,the memory space will be recycled.

    weak_ptr :
      the weak_ptr class template stores a "weak reference" to an object that is
      already managed by a shared_ptr.
      to access the object,a weak_ptr can be converted to a shared_ptr using the
      shared_ptr constructor taking weak_ptr,or the weak_ptr member function lock.
      when the last shared_ptr to the object goes away and the object is deleted,
      the attempt to obtain a shared_ptr from the weak_ptr instances that refer
      to the deleted object will fail: constructor throws boost::bad_weak_ptr,
      weak_ptr::lock() returns an empty shared_ptr.

      weak_ptr - copyconstructible
                 assignable
                 can be used in C++ standard library containers
                 comparison operators are supplied
                 operations never throw exceptions

      <boost/smart_ptr/weak_ptr.hpp>
        namespace boost {
          template<class T>
          class weak_ptr {
            ...
          };
        }

        element type :
          /*  element_type is T when T is not an array type,and U when
           *  T is U[] or U[N].
           */
          typedef ... element_type;

        construct and destruct :
          /*  default constructor,constructs an empty weak_ptr.  */
          weak_ptr() noexcept;

          /*  constructs a weak_ptr object from a shared_ptr<Y> object.  */
          template<class Y>
          weak_ptr(shared_ptr<Y> const & r) noexcept;

          /*  aliasing constructor.
           *  create weak_ptr from @r as if by using the corresponding 
           *  converting/copy/move/ constructor,but stores p instead.
           *  use_count() == r.use_count()
           *  when !expired(),shared_ptr<T>(*this).get() == p
           *  !  extension.
           */
          template<class Y>
          weak_ptr(shared_ptr<Y> const & r, element_type *p) noexcept;
          
          /*  template-bound copy-constructor.  */
          weak_ptr(weak_ptr const &r) noexcept;

          /*  template-unbound copy-constructor.  */
          template<class Y>
          weak_ptr(weak_ptr<Y> const &r) noexcept;

          /*  move-constructor.  */
          weak_ptr(weak_ptr &&r) noexcept;

          /*  destructor,destroys this weak_ptr but has no effect on the
           *  object its stored pointer points to.
           */
          ~weak_ptr() noexcept;

        member functions :
          /*  operator=& - copy assignment operator.  */
          weak_ptr &operator=(weak_ptr const &r) noexcept;

          /*  operator=&& - move assignment operator.  */
          weak_ptr &operator=(weak_ptr &&r) noexcept;

          /*  use_count - returns 0(empty weak_ptr) or the number
           *              of shared_ptr objects that share ownership
           *              with *this.
           */
          long use_count() const noexcept;

          /*  expired - if *this has been expired?(if use_count == 0)  */
          bool expired() const noexcept;

          /*  empty - if *this is empty?
           *  #  this function is an extension,not present in std::weak_ptr .
           */
          bool empty() const noexcept;

          /*  lock - convert *this to a shared_ptr object,returned by value.  */
          shared_ptr<T> lock() const noexcept;

          /*  reset - reset *this to another shared_ptr or NULL.  */
          void reset() noexcept;

          /*  swap - exchange *this and @b.  */
          void swap(weak_ptr &b) noexcept;

          /*  owner_before - if *this < @r?  */
          template<class Y>
          bool owner_before(weak_ptr<Y> const &r) const noexcept;
          template<class Y>
          bool owner_before(shared_ptr<Y> const &r) const noexcept;

          /*  owner_equals - if *this and @r share ownership or both empty?  */
          template<class Y>
          bool owner_equals(weak_ptr<Y> const &r) const noexcept;x
          template<class Y>
          bool owner_equals(shared_ptr<Y> const &r) const noexcept;

          /*  owner_hash_value - hash *this and return a hash value.  */
          std::size_t owner_hash_value() const noexcept;

        free functions :
          /*  operator< - operator overload.  */
          template<class T, class U>
          bool operator<(weak_ptr<T> const &a, weak_ptr<U> const &b) noexcept;

          /*  swap - exchange @a and @b.  */
          template<class T>
          void swap(weak_ptr<T> &a, weak_ptr<T> &b) noexcept;

      e.g.
        template<class T>
        void g(const shared_ptr<T> &v)
        {
          boost::weak_ptr<T> w(v);  //  sPInt.use_count() == w.use_count() == 1
          auto sp(w.lock());        //  sPInt.use_count() == sp.use_count() == 2
        }  //  decrease sPInt.use_count(),because @sp destroyed,now it is equal to 1.
           //  destroy @w do not affect @sPInt.

        void f(void)
        {
          boost::shared_ptr<int> sPInt(make_shared<int>(3));  //  sPInt.use_count() == 1
          g(sPInt);
          int *x = new int(10);
          boost::weak_ptr<decltype(*x)> w(sPInt, x);  //  call to aliasing-constructor
                                                      //  no shared_ptr object was created,
                                                      //  w.use_count == sPint.use_count,
                                                      //  but weak_ptr object do not destroy the object
                                                      //  it managed when destructor was called.
          delete x;                                   //  thus have to delete @x
        }

    intrusive_ptr :
      the intrusive_ptr class template stores a pointer to an object with an 
      embedded reference count,every new intrusive_ptr instance increments the
      reference count by using an unqualified call to the function intrusive_ptr_add_ref(),
      passing it the pointer as an argument.
      when an intrusive_ptr is destroyed,it calls intrusive_ptr_release(),this
      function is responsible for destroying the object when its reference count
      drops to zero.

      !  USER HAVE TO PROVIDE intrusive_ptr_add_ref() and intrusive_ptr_release()
         IN NAMESPACE,OTHERWISE,THE BOOST'S HELPER BASE CLASS TEMPLATE intrusive_ref_counter
         MAY HELP ADDING SUPPORT FOR intrusive_ptr TO THE USER TYPES.

      reasons for intrusive_ptr to be used :
        1>  some existing frameworks or OSes provide objects with embedded
            reference counts.
        2>  the memory footprint of intrusive_ptr is the same as the corresponding
            raw pointer.
        3>  intrusive_ptr<T> can be constructed from an arbitrary raw pointer
            of type T*.

      <boost/smart_ptr/intrusive_ptr.hpp>
        namespace boost {
          template<class T>
          class intrusive_ptr {
          ...
          };
        }

        element type :
          typedef T element_type;

        construct and destruct :
          /*  default constructor,construct empty intrusive_ptr object.  */
          intrusive_ptr() noexcept;

          /*  construct instrusive_ptr object with a pointer @p,and add ref_counter
           *  in the object @p points to.
           *  #  if add_ref == false
           *       do not call to intrusive_ptr_add_ref()
           */
          intrusive_ptr(T *p, bool add_ref = true);

          /*  copy-constructor  */
          intrusive_ptr(intrusive_ptr const &r);

          template<class Y>
          intrusive_ptr(intrusive_ptr<Y> const &r);

          /*  move-constructor  */
          intrusive_ptr(intrusive_ptr &&r);
        
          template<class Y>
          intrusive_ptr(intrusive_ptr<Y> &&r);

          /*  destructor,intrusive_ptr_release() would be called.  */
          ~intrusive_ptr();

        member functions :
          /*  assignment  */
          intrusive_ptr &operator=(intrusive_ptr const &r);

          template<class Y>
          intrusive_ptr &operator=(intrusive_ptr<Y> const &r);

          /*  move-assignment  */
          intrusive_ptr &operator(intrusive_ptr &&r);

          template<class Y>
          intrusive_ptr &operator=(intrusive_ptr<Y> &&r);

          /*  reset - reset get() to @r.  */
          void reset();     //  reset to an empty intrusive_ptr.
          void reset (T *r);
          void reset(T *r, bool add_ref);

          /*  member accessing  */
          T &operator*() const noexcept;
          T *operator->() const noexcept;

          /*  get - get the raw pointer.  */
          T *get() const noexcept;

          /*  detach - escapes the safety of automatic referrence counting
           *           provided by intrusive_ptr.it should be used only
           *           where strictly necessary,and when the implications are
           *           thoroughly understood.
           *  #  when use detach() to an instrusive_ptr object,the ref_counter
           *     of the object would not release.
           */
          T *detach() noexcept;

          /*  operator bool - convert intrusive_ptr to bool value and enforce
           *                  explicitly call.
           */
          explicit operator bool() const noexcept;
          
          /*  swap - exchange *this and @b.  */
          void swap(intrusive_ptr &b) noexcept;

        free functions :
          template<class T, class U>
          bool operator==(intrusive_ptr<T> const &a, intrusive_ptr<U> const &b) noexcept;
                                                     //  U *b
                          //  T *a

          template<class T, class U>
          bool operator!=(intrusive_ptr<T> const &a, intrusive_ptr<U> const &b) noexcept;
                                                     //  U *b
                          //  T *a

          template<class T>
          bool operator<(intrusive_ptr<T> const &a, intrusive_ptr<T> const &b) noexcept;

          template<class T>
          void swap(intrusive_ptr<T> &a, intrusive_ptr<T> &b) noexcept;

          template<class T>
          T *get_pointer(intrusive_ptr<T> const &p) noexcept;

          template<class T, class U>
          intrusive_ptr<T>
          static_pointer_cast(intrusive_ptr<U> const &r) noexcept;

          template<class T, class U>
          intrusive_ptr<T>
          const_pointer_cast(intrusive_ptr<U> const &r) noexcept;

          template<class T, class U>
          intrusive_ptr<T>
          dynamic_pointer_cast(intrusive_ptr<U> const &r) noexcept;

          template<class E, class T, class Y>
          std::basic_ostream<E, T> &operator<<(std::basic_ostream<E, T> &os,
                                               intrusive_ptr<Y> const &p);

      e.g.
        struct A {
          int v;
          ssize_t ref_counter;
        };

        void intrusive_ptr_add_ref(A *a)
        {
          ++a->ref_counter;
        }

        void intrusive_ptr_release(A *a)
        {
          --a->ref_counter;
        }

        void func(void)
        {
          A a(0);
          boost::intrusive_ptr<A> intrusive1(&a);   //  a.ref_counter == 1
          boost::intrusive_ptr<A> intrusive2(&a);   //  a.ref_counter == 2
          intrusive1->v = 3;  //  intrusive2.get() == intrusive1.get()
        }

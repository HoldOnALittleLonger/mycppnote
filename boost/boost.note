C++ Boost 1.84.0

foreach >
    BOOST_FOREACH : <boost/foreach.hpp>
      It iterates over sequences for us,freeing us from having to deal directly with
      iterators or write predicates.
      Advantages :
        no dynamic allocations
        makes no virtual function calls or calls through function pointers
        makes no calls that are not transparent to the compiler's optimizer

      Syntax :
        BOOST_FOREACH(iterator, sequence)
        {
          ...  //  loop body
        }
        @iterator : <type> <id-expression>
                    everytime entered the loop body,@id-expression represents
                    the element in @sequence.
        @sequence : the sequence for loop.
                    if it is a function invocation,the return value must be
                    proper type and the function only be called once.

        //  if typeof(@iterator) != typeof(@element)
              convert type of @element to type of @iterator

        e.g.
          std::string hello("hello, world!");
          BOOST_FOREACH(char ch, hello)
          {
            std::cout << ch;
          }  //  hello, world!
  
          @ch : the object that Iterator refers to.
                @ch can be a predeclared variable.
          @hello : the target to BOOST_FOREACH
          { ... } : what to do for each @ch

      supported sequence types :
        stl containers
        arrays
        null-terminated strings(char and wchar_t)
        std::pair of iterators

      loop keywords is able to be used in the body of BOOST_FOREACH :
        return
        continue
        break
        /*  BOOST_FOREACH is a macro function implemented via "for-loop"  */

      BOOST_FOREACH is possible to be nested :
        e.g.
          std::vector<std::string> vs;
          ...
          BOOST_FOREACH(std::string s, vs)
          {
            ...
            BOOST_FOREACH(char ch, s)
            {
              ...
            }
            ...
          }

      !  use a C++ macro to define BOOST_FOREACH is possible but discourage,
         because that maybe cause name conflicts.
         #  i.e. Qt defined a macro named "foreach".

      BOOST_REVERSE_FOREACH(@iterator, @sequence) :
        iterating over collections in reverse order.

asio >
    Boost.Asio may be used to perform both synchronous and asynchronous operations
    on I/O objects.

    Synchronous operations :
      Program ->
      I/O Object ->
      I/O Execution Context ->
      Operating System
      <- Operating System
      <- I/O Execution Context
      <- I/O Object
         Program

    Asynchronous operations :
      Program -> {
        I/O Object
        Completion Handler
      }
      I/O Object ->
      I/O Execution Context ->
      Operating System
      <- Operating System
      <- I/O Eexcution Context
      <- Completion Handler
         Program

    I/O Object :
      the specific I/O object such socket,file,pipe, etc.
      e.g.
        boost::asio::ip::tcp::socket object

    I/O Execution Context :
      it represents the link of program to the operating system's I/O services.
      the program at least one I/O execution context,such as an
        boost::asio::io_context object
        boost::asio::thread_pool object
        boost::asio::system_context object

    Completion Handler :
      a function or function object with the signature 
        void <completion_handler_name>(const boost::system::error_code &);

    any request program initiates on a specific I/O object,the corresponding I/O Execution Context
    object will as an agent submits this request to Operating System.
    after the action for the request accmoplished by Operating System,it returns the result of the
    operation to I/O execution context.
    I/O Execution Context translates any error resulting from the operation into an object of
    type boost::system::error_code,the result is then forwarded back up to the I/O object.
    I/O object throws an exception of type boost::system::system_error if the operation failed.
    /*  Some overloaded version of action-methods does not throw an exception,as instead,such methods
     *  requires an object of type boost::system::system_error as the additional parameter.
     *  e.g.
     *    boost::asio::ip::tcp::socket s(boost::asio::io_context{});
     *    s.connect(server_endpoint);      //  throw
     *    boost::system::system_error ec;
     *    s.connect(server_endpoint, ec);  //  no throw
     */

    the advantage for boost.asio library that is :
      >  portability
           boost has different implementations to different Operating System
      >  scalability
           facilitate concurrent connections
      >  efficiency
           support some special techniques allow programs to minmise data copying
      >  model concepts from established APIs
           such BSD sockets
      >  ease of use
           it is complex but ease of to learn how to use them
      >  basis for further abstraction
           permit the development of other libraries that provide higher levels of abstraction

      /*  I figure that boost.asio is another wraper of POSIX.1 I/O APIs,the POSIX.1 I/O APIs
       *  are flexible to composing,feature require on demand.
       *  but even POSIX.1 is a standard about system features,might a special system does not
       *  support some particular features.
       *  and new to such OS have to learn the POSIX.1 features on that OS,it maybe spend a lot of
       *  times.
       *  another problem is resource manage,the object holds relative resource its lifetime is
       *  unclear,some resource have to be manually recycled by programmer.
       *  high-level abstract layer such boost.asio will eliminates the problems occurred on the
       *  low-level interace.
       *  e.g.
       *    POSIX.1 API :
       *      int socket = -1;
       *      errno = 0;
       *      socket = socket(AF_INET, SOCK_STREAM, IPPROT_TCP);
       *      if (socket < 0) {
       *              fprintf(stderr, "Failed to acquire a socket in tcp protocol.\n");
       *              exit(errno);
       *      }
       *      errno = 0;
       *      if (connect(socket, server_endpoint, server_endpoint_length) < 0) {
       *              fprintf(stderr, "Failed to establish connection with server.\n");
       *              exit(errno);
       *      }
       *      ...
       *      shutdown(socket, SHUT_RDWR);  //  if @socket is a local variable,and returned from
       *                                    //  a special worker but did not release the resource
       *                                    //  it represents,then the resource will be existing until
       *                                    //  program exit and recycled by kernel.
       *      ...
       *    
       *    Boost.Asio :
       *      boost::asio::ip::tcp::socket socket(boost::asio::io_context{});
       *      boost::system::system_error ec;
       *      socket.connect(server_endpoint, ec);
       *      ...
       *      //  connection will be released when the I/O object is destructing.(RAII)
       *      //  programmer need not to manage resource manually.
       *      //  programmer need not to learn about the low-level APIs on a specific system,just
       *      //  learn about APIs of boost.asio as well.
       */


SmartPtr >
    Boost.SmartPtr: The Smart Pointer Library

    smart pointer class templates:
      scoped_ptr:  used to contain ownership of a dynamically allocated object
                   to the current scope.
      scoped_array:  provides scoped ownership for a dynamically allocated array.
      shared_ptr:  a versatile tool for managing shared ownership of an object or
                   or array.
      weak_ptr:  a non-owning observer to a shared_ptr-managed object that can be
                 promoted temporarily to shared_ptr.
      intrusive_ptr:  a pointer to objects with an embedded reference count.
      local_shared_ptr:  providing shared ownership within a single thread.

      //  shared_ptr and weak_ptr are part of the C++ standard from C++11.

    utility functions and classes:
      make_shared(),allocate_shared():  factory functions for creating objects 
                                        that return a shared_ptr.
      make_unique():  factory function returning std::unique_ptr.
      allocate_unique():  factory function for creating objects using an allocator
                          that return a std::unique_ptr.
      enable_shared_from_this:  helper base class that enables the acquisition
                                of a shared_ptr pointing to this.
      enable_shared_from:  a newer and better replacement for enable_shared_from_this.
      pointer_to_other:  helper trait for converting one smart pointer type to
                         another.
      static_pointer_cast:  generic smart pointer casts.
      intrusive_ref_counter:  helper base class containing a reference count.
      atomic_shared_ptr:  helper class implementing the interface of std::atomic
                          for a value of type shared_ptr.

      !  the destructor or operator delete for an object managed by pointers in
         the library are not allowed to throw exceptions.

    scoped_ptr :
      scoped_ptr is a simple solution for simple needs,supplies a basic
      "resource acquisition is initialization" facility,without shared-ownership
      or transfer-of-ownership semantics.
      
      scoped_ptr - noncopyable
                   cannot be used in C++ Standard Library containers.
                   cannot correctly hold a pointer to a dynamically allocated array

      <boost/smart_ptr/scoped_ptr.hpp>
        namespace boost {
          template<class T>
          class scoped_ptr {
            ...
          };
        }
        
        element type :
          typedef T element_type;
        
        construct and destruct :
          explicit scoped_ptr(T *p = 0) noexcept;
  
          /*  the destructor or the operator delete of the object is type of T
           *  forbid throw exception.
           *  and T must be a complete type.(Succeed to constructed)
           */
          ~scoped_ptr() noexcept;
  
        member functions :
          /*  reset - member function reset @pointer to @p.
           *          the previous object pointed by @pointer
           *          will automatically freed.
           */
          void reset(T *p = 0) noexcept;
  
          /*  operator* - overload operator *  */
          T &operator*() const noexcept;
          
          /*  operator-> - overload member-accessing operator  */
          T *operator->() const noexcept;
  
          /*  get - returns the raw pointer.  */
          T *get() const noexcept;
  
          /*  operator bool - overload type converting,enforce explicit.  */
          explicit operator bool() const noexcept;
          
          /*  swap - swap two scoped_ptr objects.
           *  @b:    another,it will swap to this.
           */
          void swap(scoped_ptr &b) noexcept;
  
        free functions :
          template<class T>
          void swap(scoped_ptr<T> &a, scoped_ptr<T> &b) noexcept;
  
          template<class T>
          bool operator==(scoped_ptr<T> const &p, std::nullptr_t) noexcept;
      
          template<class T>
          bool operator==(std::nullptr_t, scoped_ptr<T> const &p) noexcept;
          
          template<class T>
          bool operator!=(scoped_ptr<T> const &p, std::nullptr_t) noexcept;
          
          template<class T>
          bool operator!=(std::nullptr_t, scoped_ptr<T> const &p) noexcept;
  
      e.g.
        void func(void)
        {
          scoped_ptr<int> pInt(new int(10));  //  explicit construct.
          if (pInt == NULL)                   //  free function calls.
            throw std::abort();
        }  //  @pInt dead,and the memory of a int object with value 10 freed automatically.

      !!  the primary reason to use scoped_ptr rather than std::auto_ptr or std::unique_ptr
            1>  "resource acquisition is initialization" to be applied only for
                the current scope and have no intent to transfer ownership.
            2>  prevent a later maintenance programmer from adding a function
                that transfers ownership by returning the auto_ptr,because
                saw auto_ptr,and assumed ownership could safely be transferred.
  

chapter1>
	Item1 : view c++ as a federation of languages
	      c++ is a multiparadigm programming language,one supporting
	      a combination of procedural,object-oriented,functional,generic,
	      and metaprogramming features.
	      the primary sub-languages of c++ is :
	      	  C language,C++ is still based on C
		  Object-Oriented C++
		    contains:
			classes
			encap-sulation
			inheritance
			polymorphism
			virtual function
			.etc
		  Template C++
		    contains:
			template rules to make generic programming
		  The STL
		    contains:
			containers
	
		iterators
			algorithms
			function objects
			
		#  for easier to understand c++,these sublanguages is very important.
		#  may be encounter situations where effective programming requires that
		   change strategy when switch from one sublanguage to another.
		#  for built-in type,pass-by-value is more efficient than pass-by-reference.
		   pass-by-reference-to-const is better when deal with C++ template.
		   but when using STL,pass-by-value rule applies again,because that iterators
		   and function objects are modeled on pointers in C.

	       !!  rules for effective c++ programming vary,depending on the part of c++ you are using  !!


	Item2 : prefer consts,enums,and inlines to #defines
	      because preprocessor isnt a part of c++ language,it is a behavior for compiler.
	      preprocess macro may be removed by the preprocessor before the source code ever
	      gets to a compiler,then it will not be contained into symbol table,this would
	      cause problem for use a constant.
	      this problem can also crop up in a symbolic debugger,because,again,the name of
	      macro may not be in the symbol table.

	      #define PI 3.1415             //  may be a problem 
	      const double pi = 3.1415;     //  better
	      enum : double {PI = 3.1415};  //  best

	      #  constant may be yield smaller code than macro definition,because compiler may
	         be produces more copies to that constant.

	      two special important case:
	        1> in the case defining constant pointers
		   e.g.
			const char *const example = "example"; //  const char * const bind symbol
			      	   	  	    	       //  example just refers to string "example"
			const std::string example("example");  //  best (as much as possible use c++
			      		  		       //  std::string to instead c-style string)

		2> class-specific constans
		   to limit the scope of a constant to a class,must make it a member,
		   and to ensure there is at most one copy of the constant.
		   e.g.
			struct A {
			       static const double pi;
			       enum : double {PI = 3.1415};  //  enum hack
			};
			const double A::pi = 3.1415;

			#  usually,static class member cant be initialized in declaration,
			   in-class initialization is allowed only for integral types and
			   only for constants.
			#  if need a contant in class declaration or definition,enumerated type
			   is more useful than constant declaration.
			#  enum hack never take an unnecessary memory allocation,but constant 
			   objects will take.

	      use inline template function to instead macro function:
	      	  macro function :
		  	#define CALL_FUNC(a, b) func((a) > (b) ? (a) : (b))
			int a = 3, b = 0;
			CALL_FUNC(++a, b);  //  a would increase twice,it's not right

		  inline template function:
		  	 template<class T>
			 inline void call_func(T &a, T &b)
			 {
				f(a > b ? a : b);
			 }

			 int a = 3, b = 0;
			 call_func(++a, b);  //  right,a just increase once

	      !!  for simple constants,prefer const objects or enums to #defines  !!
	      !!  for function-like macros,prefer inline functions to #defines  !!


	Item3 : use const whenever possible
	      the wonderful thing about const is that it allow you to specify a semantic
	      constraint - a particular object should not be modified - and compilers will
	      enforce that constraint.

	      const Type Obj;  //  declares an Obj of Type that is a constant.
	      Type *const Obj; //  declares a pointer of Type and this pointer is constant
	      const Type *Obj; //  declares a pointer of Type and the object which points to
	      	    	       //  is constant
	      const Type *const Obj;  //  declares a pointer is constant which points to an 
	      	    	 	      //  object of Type that is constant

	      #  const Type *obj; as same with Type const *obj;
	      #  having a function return a constant value is generally inappropriate,but
	         sometimes doing so can reduce the incidence of client errors without
		 giving up safety or efficiency.
		 E.g.
		   struct A {
		   	  struct A operator*(const struct A &a, const struct A &b)
			  {
				...
				return *this;
			  }
			  struct A operator=(const struct A &a) { ... }
		   };

		   struct A a, b, c;
		   a * b = c;  //  a.operator*(&a, &b) returned a
		       	       //  a.operator=(c)
			       //  it's work but should not assign an lvalue to rvalue
			       //  ill-form

		   if (a * b = c);  //  suppose operator==() been defined.
		      	       	    //  if operator=() doesnt return constant value,
				    //  this expression would pass checking by compiler.

				    //  if operator=() returns constant value,
				    //  compiler would throw error try to changing a constant object.
				    //  that is helpful to avoid logical error.

	      const member functions:
	      	    the purpose of const on member functions is to identify which member functions
		    may be invoked on const objects
		    there has two important reasons to do this:
		    	  first>
				they make the interface of a class easier to understand.

			  second>
				they make it possible to work with const objects.

			  #  one of the fundamental ways to improve a c++ program's performance is to
			     pass objects by reference-to-const,this technique is viale only if there are
			     const member functions with which to manipulate that resulting const-qualified
			     objects.
			  #  a fact:
			       member functions differing only in their constness can be overloaded,this is an
			       important feature of c++.
			       E.g.
				struct A {
				       char &operator[](std::size_t pos) { ... }
				       //  realy parameters of this overload operator [] is
				       //  char &operator[](struct A &, std::size_t);

				       const char &operator[](std::size_t pos) const { ... }
				       //  realy parameters of this overload operator [] is 
				       //  const char &operator[](const struct A &, std::size_t);
				};
				//  const member function works with a const object,so,cant modify anything of
				//  the const object in the body of that const member function.(excluding static
				//  data members,because them are not inside to class object)

		    bitwise constness AND logical constness:
		    	    bitwise-constness> (it's c++'s definition of constness)
				a member function is const if and only if it doesnt modify any of the object's
				data members(excluding static data member),if it doesnt modify any of the bits
				inside the object.

			    logical-constness>
				even create a constant object and invoke only const member functions on it,may
				still change its value.

			    #  a const member function might modify some of the bits in the object on which it's
			       invoked,but only in ways that clients cant detect.

			    E.g.
				struct A {
				       char *strC;
				       char &operator[](std::size_t pos) const { ... };
				};

				const struct A a;	//  constant object
				char *pChar(nullptr);
				pChar = &a[0];		//  invoked a const member function of a constant object
				*pChar = '\0';		//  but still can change bits inside the constant object
				       	 		//  there has a way make operator[] becomes bitwise-constness
							//  is that return a const reference.

		    a way to change bits of object in a const member function that is
		    use 'mutable' keyword,'mutable' frees non-static data members from the
		    constraints of bitwise constness.
		    E.g.
			struct A {
			       mutable std::size_t _length;
			       ...
			       std::size_t getLength(void) const
			       {
					return _length = std::strlen(<char pointer>);
			       }
			};
		    
	      avoiding duplication in const and non-const member functions:
	      	    may be some overload member functions do same procedure in their body,for avoiding
		    duplication,can make a member function to wrap that procedure,and use function calling
		    to instead procedure codes.
		    but this is still duplication be there.
		    a way to avoiding duplication :
		      let version A to call version B,and invoke that procedure function in version B.

		    for const and non-const member functions,when using that way to avoid duplication
		    have to limit order between them :
		    	 version A must be non-const member function,
			 version B must be const member function

			 reason : const member function did a promise that never change bits on which invoked.
			 	  non-const member function didnt does that promise.this means non-const member
				  function can freely change anything in the object.
				  if reverse order,the promise would be ridded temporary in const member function
				  when control deliver to non-const member function,it's wrong.

			 E.g.
				struct A {
				       const char &operator[](std::size_t pos) const { ... }
				       char &operator[](std::size_t pos)
				       {
						...
						return const_cast<char &>(static_cast<const char &>(*this)[pos]);
				       }
				       ...
				};

				//  casting away is not a good idea,but for avoiding duplication,there isnt other
				//  way to avoid duplication between const and non-const member functions.

	      !!  declaring something const helps compilers detect usage errors.const can be applied
	          to objects at any scope,to function parameters and return types,and to member functions
		  as a whole  !!
	      !!  compilers enforce bitwise constness,but you should program using logical constness  !!
	      !!  when const and non-const member functions have essentially identical implementations,
	          code duplication can be avoided by having the non-const version call the const version !!

	 Item4 : make sure that objects are initialized before they're used
	       reading uninitialized values yields undefined behavior,that may halt program,or readed semi-random
	       bits,and then pollute the object you read the bits into,eventually leading to inscrutable program
	       behavior and a lot of unpleasant debugging.

	       For example :
	       	   int a;
		   int b;
		   return a + b;  //  a + b maybe equals to 10, a = 3, b = 7, or a = 1, b = 9, or a = -2, b = 12

		   int *a;
		   *a = 36;	  //  a had not initialized,if the address a points to in the process address space,
		      		  //  it just has exception,if it is not,systemctl will send SIGSEGV,that would occurs
				  //  process exit.

	      built-in type :
	      	       int a(10);
		       char c('c');
		       const char *const conststr("hello world");
		       struct the_data td{x, y, z};

		       #  built-in type is in C part of C++,that almost alike in assignment,
		       	  but shouldnt use any objects of built-in type before initialized.

	      user-defined C++ type :
	      	       class A {
		       	     A() { ... }
			     A(const std::string &s1, const std::string &s2, const std::vector &v2, std::size_t st)
			     {
			       _s1 = s1, _s2 = s2;
			       _v1 = v1;
			       _st = st;
			     }
			     A(const std::string &s1, const std::string &s2, const std::vector &v2, std::size_t st)
			     : _s1(s1), _s2(s2), _v1(v1), _st(st) { }

		       private:
		         std::string _s1, _s2;
			 std::vector _v1;
			 std::size_t _st;
		       };

		       there has two versions :
		       	     <1> assignment-based
			     <2> member-initialization-list-based

			     <1> : first use default constructor to construct _s1, _s2, _v1
			           second use assignment-constructor to assign _s1, _s2, _v1
				   finished.

			     <2> : first use copy-constructor to construct _s1, _s2, _v1
			     	   finished.
				   //  less cost

			so <2> is better than <1>,but may be there has several constructors they has
			such member-initialization-list,for simply work,if some data member is not
			used immediately,can place them into a function which use assignment to
			assign them.
			E.g.
				private:
				  A_init_built_in(arg-list) { <assignment with data member> }
				  //  constructor can calls this function

			but base class object have to initialized before derived class object!!!

			!!  c++ class data member would be initialized in the order them is declared,
			    that is,the order of member-initialization-list doesnt influence the order
			    they will be initialized.
			    in the example, _s1 -> _s2 -> _v1 -> _st  !!

	      translation unit : 
	      		  A translation unit is the source code giving rise to a single object file.
			  It's basically a single source file,plus all of its #include files.

			  A static object is one that exists from the time it's constructed until the end of
			  the program.stack and heap-based objects are thus excluded.included are global
			  objects,objects defined at namespace scope,objects declared static inside classes,
			  objects declared static inside functions,and objects declared static at file scope.

			  local static object is such object which is static and in a function's body.
			  others known as non-local static objects.

			  !!  relative order of initialization of non-local static objects defined in different
			      translation units is undefined  !!

			  E.g.
				file1.c : int a = 10;
				file2.c : int b = a;
				file3.c : int c = b;

				the order of initialization for them is undefined,because these file are
				different translation units.

				maybe c would be initialized at first,then them has error values.

			  How to prevent this ?
			  :  let non-local static objects become local static objects.

			  can define a function which contains local static object and it will returns a reference to
			  these local static object.
			  like this :

			       int &global_value_a(void)
			       {
			         static int a = 16;
				 return a;
			       }

			  //  a would be created and initialized when function global_value_a() is invoke,and a will be
			  //  recycle after program exit.if dont call that function at anywhere,it will not incur 
			  //  runtime cost.

			  //  the better way is define such function as inline function.
			  //  not only built-in type can do this,other user-defined c++ type also can do this as well.
			      struct X &global_object_sX(arg-list)
			      {
			        static struct X sX{arg-list};
				return sX;
			      }


	         !!  manually initialize objects of built-in type,because c++ only sometimes initializes them itself  !!
		 //  initializes them to zero,but not always

		 !!  in a constructor,prefer use of the member initialization list to assignment inside the body of
		     the constructor.list data members in the initialization list in the same order they're declared 
		     in the class. (for prevent confusion)  !!
		 !!  avoid initialization order problems across translation units by replacing non-local static objects
		     with local static objects.  !!
			      		   

	 Item5 : known what functions C++ silently writes and calls
	       a class is an empty if c++ isnt get through with it.
	       if there is none of constructor or destructor or copy constructor or copy assignment operator was
	       defined in a class,compiler will automatically defines them implicitly,if they are needed,but it
	       doesnt take much to need them.all these function will both public and inline.
	       (from c++11,compiler will defines move constructor move assignment operator implicitly,if they were
	       not defined)

	       if there is a constructor was defined,have to defined a default constructor be there,of course,
	       use =default specifier is the other way.

	       #  the generated destructor is non-virtual unless it's for a class inheriting from a base class that
	          itself declares a virtual destructor.
	       #  compiler generated copy assignment operator only when the resulting code is both legal and has a
	          reasonable chance of making sense.
		  if a base class placed its copy assignment operator in private,then compiler will refuse to defines
		  copy assignment operator implicitly for derived class.

	       #  the compiler generated copy constructor and copy assignment operator will does shallow duplication,
	          that is,copy bits not copy object.

	       !!  compilers may implicitly generate a class's default constructor,copy constructor,copy assignment 
	           operator,and destructor.  !!


	 Item6 : explicitly disallow the use of compiler-generated functions you dont want
	       for preventing compiler-generated version can eliminate some bugs when try to copy a class inadvertently.
	       
	       method1>
			declare copy-constructor and copy-assignment as private members and never implement them.
			E.g.
				class A {
				public:
				  ...

				private:
				  A(const A &);
				  A &operator=(const A &);
				};

				//  just declaring,dont implement.
				//  if anywhere try to copy class A through these functions,
				//  linker would throw error.

	       method2>
			define a empty base class,and declare its copy-constructor and copy-assignment as private members,
			dont implement them.
			other class which dont want to be copied can inherit from the class.
			E.g.
				class Uncopyable {
				private:
				  Uncopyable(const Uncopyable &);
				  Uncopyable &operator=(const Uncopyable &);
				};

				//  neednt inherit Uncopyable with public
				//  and neednt declare its destructor as a virtual function(it has no data)
				class A : private Uncopyable {
				  ...
				};

				//  compiler would generates copy-constructor and copy-assignment for class A if anywhere
				//  try to copy class A.
				//  but for copy class A,the base class Uncopyable have to be copied as well,so compiler
				//  try to copy it through its copy-constructor or copy-assignment,but them are private,
				//  derived class cant access base class'private members straight.
				//  compiler would throw an error.

			#  Uncopyable contains no data,so it is eligible for the empty base class optimization,but 
			   because it is a base class,use of this technique could lead to multiple inheritance.
			   Multiple-Inheritance,in turn,can sometimes disable the empty base class optimization.


	       method3>
			from c++11,function-qualifier = delete can declare that the function was deleted.
			E.g.
				class A {
				public:
				  A(const A &) = delete;
				  A &operator=(const A &) = delete;
				  ...
				};

				//  anywhere try to call deleted function,compiler would throws error.


	       #  for method1,error would be thrown while link-time,
	       	  for method2 and method3,error would be thrown while compile-time.
		  throw error at compile-time is better than throw error at link-time.(if program use dynamic library,
		  	      	 	      	 	     	   	    	       link-time error would crash program)

	       !!  to disallow functionality automatically provided by compilers,declare the corresponding member functions
	           private and give no implementations.
		   Using a base class like Uncopyable is one way to do this.  !!

		    
	 Item7 : declare destructors virtual in polymorphic base classes
	       c++ specifies that when a derived class object is deleted through a pointer to a base class with a 
	       non-virtual destructor,results are undefined.

	       if try to delete a derived class object through a base class pointer,then the resource of derived
	       would not be deleted.
	       E.g.
			class A { ... };  //  destructor of A is not a virtual function
			class B : public A { ... };

			A *ab = new class B;
			delete ab;  //  resoure of B would not be deleted.

	       if a class has virtual function,then pointer vptr and array vtbl would be contained.
	       vptr is "virtual table pointer"
	       vtbl is "virtual table"
	       	    //  exactly form of them is designed by implementation detail.
		    //  maybe not an array.
		    //  vptr and vtbl is not portiable! (it is the second part of C++)

	       it A has a virtual destructor,then statement 'delete ab' would invoke B::~B() first,then invoke
	       A::~A().

	       vtbl is used to determine which function should be invoke through object pointer or reference.
	       so,vptr and vtbl would increase size of class,if dont want such class as base class,should not
	       declare any virtual function in it.
	       (a class maybe occopied 64bits,but it will occopied 128bits if there has a virtual function in it.)

	       !!  polymorphic base classes should declare virtual destructors,if a class has any virtual functions,
	           it should have a virtual destructor.  !!
	       !!  classes not designed to be base classes or not designed to be used polymorphically should not
	           declare virtual destructors.  !!
		   #  STL and std::string and std::input_iterator_tag and etc. are not designed to allow the
		      manipulation of derived class objects via base class interfaces.
		      (dont inherit from STL !!)

	       !!  occasionally it can be convenient to give a class a pure virtual destructor,a class has pure virtual
	           function would be abstract class,it cant be instantiated.but if declare the destructor of this class
		   as a virtual function,have to defined its body,because of it is that when delete resource of a derived
		   class via destructor,the lateast invocation of function must be base class destructor.  !!


	 Item8 : Prevent exceptions from leaving destructors
	       C++ doest allows one too many exceptions is existed in program.
	       suppose,container v is destroying,then all element in it have to be destroyed,too.
	       the first destroy failed and throw an exception,but remainder is still have to be
	       destroyed,then the second exception is thrown in encountered.by the time,program
	       has two exceptions aliving,this is a problem.

	       if exception from destructor,then there is hard to react the condition that exception
	       was thrown.
	       several exceptions is aliving that cause premature program termination or undefined 
	       behavior.

	       First method :
	       	     use try { ... } catch () { ... } in destructor,there can ignore an exception from
		     try {} or deal with it in catch {}.
		     suppose a destructor will calls func() to does some works,but it maybe throw an
		     exception,then have to put the invocation of it into try {}.
		     deal with the exception or ignore it(just record log,but do nothing) is optional.

		     #  deal with the exception to terminate the program.
		     #  swallow the exception,record log and ignore it.

	       Second method :
	       	      wrap such function it might throw exception as a user interface,user should call that interface
		      manually even it recycle class resource.there has a way to capture such exception and can
		      react the condition in debugging time.of course,could deal with it or ignore it in program.

		      #  the exception has to come from some non-destructor function.

	       !!  destructors should never emit exceptions.if functions called in a destructor may throw,the destructor should
	           catch any exceptions,then swallow them or terminate the program(std::abort()). !!
	       !!  if class clients need to be able to react to exceptions thrown during an operation,the class should provide 
	           a regular function that performs the operation.  !!


	 Item9 : Never call virtual functions during construction or destruction
	       C++ dont allow to call virtual function during construction or destruction.
	       If base class call virtual function during constructor,and the derived class has override the virtual function,
	       when derived class is constructing,its virtual function would never be called by base class that the virtual
	       function had not been initialized.
	       During base class construction,virtual functions never go down into derived classes.
	       Calling down to parts of an object that have not yet been initialized is inherently dangerous.

	       E.g.
	         class A {
		   public:
		     A() { vfunction(); ... }
		     virtual void vfunction(void) { ... }
		     ...
		 };

		 class B : A {
		   public:
		     B() { ... }
		     //  during constructor of A,the vfunction is point to A::vfunction,not B::vfunction.
		     //  if A::vfunction is a pure virtual function,linker would cant find such function for link.
		     //  because instanse of the virtual function was made up after object of B is created.
		     virtual void vfunction(void) { *** }
		 };

	       #  not only do virtual functions resolve to the base class,but the parts of the language using runtime type
	       #  information treat the object as a base class type.(dynamic_cast ...)

	       An object doesnt become a derived class object until execution of a derived class constructor begins !
	       An object is a derived class object until execution of a derived class destructor begins !

	       The same reasoning applies during destruction.Once a derived class destructor has run,the object's derived class
	       data members assume undefined values.so at the time,the type of this object is that of base class.

	       #  All functions called in constructor or destructor each also cant calls virtual function.

	       Cant use virtual functions to call down from base classes during construction,but for compensate,can having derived
	       classes pass necessary construction information up to base class constructors.
	       Use a special named function in derived class to make parameter for base class constructor is more readable.

	       !!  dont call virtual functions during construction or destruction,because such calls will never go to a more
	           derived class than of the currently executing constructor or destructor.  !!





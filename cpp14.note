C++14
    C++14 is a minor version after the major version C++11,featuring mainly minor improvements and defect fixes.

> Variable template :
    A variable template defines a family of variables or static data members.
    Syntax:
      template<parameter-list> variable-declaration;

      variable-declaration :
        a declaration of a variable,the declared variable name becomes a template name.

      parameter-list :
        a non-empty comma-separated list of the template parameters,each of which is either non-type parameter,
	a type parameter,a template parameter,or a parameter pack of any of those.

    A variable instantiated from a variable template is called an instantiated variable.
    A static data member instantiated from a static data member template is called an instantiated static data member.
    A variable template may be introduced by a template declaration at namespace scope,where variable-declaration declares
    a variable.
    #  class static data member template is defined outside the class definition.


    E.g. :
      template<class T>			//  constant template
      constexpr T pi = T(3.1415926L);

      return pi<float> * 2;

      template<class _CType>		//  alias template
      using vec = std::vector<_CType>;

      vec<std::string> s_vec;

      template<class _CType>		//  variable template ::(global namespace)
      std::vector<_CType> vec;	
      std::vector<int> *pVec1 = &vec<int>;
      std::vector<int> *pVec2 = &vec<int>;

      //  pVec1 == pVec2

      #  A template declaration of a static data member at namespace scope may also be a definition of a non-template 
      #  data member of a class template

      struct A {
        template<typename T> static const T min;  //  declaration  A::(namespace scope)
			     	    	    	  //  definition of a static data member must outside of class definition
      };
      template<class T>
      const T A::min = { };			  //  definition

    #  variable template is implicitly instantiated when a specialization of the variable template is referenced in
    #  a context that requires a variable definition to exist or if the existence of the definition affects the 
    #  semantics of the program (if the variable is needed for constant evaluation by an expression).


> generic lambda expression :
    generic lambda expresson depend on ClosureType.
    syntax :
      [captures] <template-parameters> requires(optional) (arguments) specs requires(optional) { body };
      [captures] <template-parameters> requires(optional) { body };
      [captures] <template-parameters> requires(optional) specs { body };

      specs : consists of specifiers,exception,attributes and trailing-return-type in that order;
      	      each of these is optional.

    usage : 
      int i = 3, j = 4;
      auto tf = [=] <class _T> requires std::floating_point<_T> (_T x) -> _T
        {
	  return (i + j) * x;
	};  /*  for restrict template,could use concept  */
      
      return tf(3.5);

    members of ClosureType :
      //  they cant be explicitly instantiated,explicitly specialized or
      //  (since c++14)named in a friend declaration.

      ret ClosureType::operator()(params);
      template<template-params>
      ret ClosureType::operator()(params);

      ClosureType::operator ret(*)(params)();
      E.g.
        capture-less non-generic lambda :
	  using F = ret(*)(params);	/*  until c++17  */
	  operator F() const noexcept;

	  using F = ret(*)(params);	/*  since c++17  */
	  constexpr operator F() const noexcept;

	capture-less generic lambda :
	  template<template-params> using fptr_t = ret(*)(params);  /*  since c++14,until c++17  */
	  template<template-params> operator fptr_t<template-params>() const noexcept;

	  template<template-params> using fptr_t = ret(*)(params);  /*  since c++17  */
	  template<template-params> constexpr operator fptr_t<template-params>() const noexcept;

      #  a generic captureless lambda has a user-defined conversion function template with the
         same invented template parameter list as the function-call operator template.
	 if the return type is empty or auto,it is obtained by return type deduction on the 
	 function template specialization,which,in turn,is obtained by template argument deduction
	 for conversion function templates.


      ClosureType::ClosureType() =default;  /*  since c++20,only if no captures are specified  */
      ClosureType::ClosureType(const ClosureType &) =default;
      ClosureType::ClosureType(ClosureType &&) =default;

      #  ClosureType have no constructor in c++14
      #  copy-constructor and move-constructor of ClosureType is implicitly defined by compiler.

      ClosureType &ClosureType::operator=(const ClosureType &) =delete;  /*  until c++20  */

      ClosureType &ClosureType::operator=(const ClosureType &) =default;  /*  since c++20,only if no captures are specified  */
      ClosureType &ClosureType::operator=(ClosureType &&) = default;  /*  since c++20,only if no captures are specified  */
      ClosureType &ClosureType::operator=(const ClosureType &) =delete;  /*  since c++20,if have captrues were specified  */

      ClosureType::~ClosureType();

      ClosureType::<Captures>;


    #  lambda expression could be default value to function argument,but it must be no captures or all 
       captures have initializers. (since c++14)
       E.g.
         int x = 3, y = 4;
         void func1(int (*fp = ([x = 1, y = 2](int) -> int { ... }))(int)();
	 //  even x and y had been declared,the noname lambda expression cant captures them.


> lamabda init-capture (concept)
    init-capture also called "generalized lambda captures",which allow to specify,in the capture brackets :
      the NAME of a data member in the closure class generated from the lambda
      an EXPRESSION INITIALIZEING that data member

    syntax :
      [capture = rvalue] () { <body> };

      E.g.
        auto pUnique = std::make_unique(5);
	auto lambda = [ p = std::move(pUnique) ] () { return *p + 5; };

	#  this will basically move the pointer object into the data member 'p' of the closure class created
	   from the lambda.  // auto p = std::move(pUnique); ClosureType lambda.p
	#  std::bind is posibility to emulate the move capture
	     auto pUnique = std::make_unique(5);
	     auto lambda = std::bind([] (const std::unique_ptr &p) { return *p + 5; }, std::move(pUnique));


> new/delete elision
    syntax :
      ::(optional) new (type) initializer(optional)
      ::(optional) new new-type initializer(optional)
      ::(optional) new (placement-params) (type) initializer(optional)
      ::(optional) new (placement-params) new-type initializer(optional)

      type : type-id,which may be array type,and may include a placeholdertype specifier(c++11),or inlcude a class template name
             whose argument is to be deduced by class template argument deduction.
	     placeholdertype : auto | decltype (auto)

      new-type : same as type,but is cannot include parentheses
      	         additional : new-type is greedy,it will include every token that can be a part of a declarator.
		 E.g.
		   new int + 1;  //  parsed as (new int) + 1,but cant be "new int * 1;"

      placement-params : a buffer where new allocate memory for the object.
      		         E.g.
			   char buffer[256];
			   auto i = new (buffer) int(16);  //  allocate memory from buffer and init *i as 16.
			   	    		 	   //  type of i would be automatically deduced to int pointer.

      initializer : it is not optional if 
      		      type or new-type is an array of unknown bound;
		      a placeholder is used in type or new-type,that is,auto or decltype(auto),possibly combined with
		      a type constraint;
		      a class template is used in type or new-type whose arguments need to be deduced;

      #  new would automatically adjust alignment via std::align_val_t()
         new int == new(sizeof(int), std::align_val_t(alignof(int)))  //  operator new()
	 //  overhead would effective when allocate an array. new(sizeof(Type) + overhead, std::align_val_t(alignof(Type)))

      #  delete should combined a part with new,
         delete[] should combined a part with new[]


> relaxed restrictions on constexpr functions
    the function body must not contain :
      < a goto statement
      < a statement with a label other than case and default
      < a try-block
      < an asm declaration
      < a definition of a variable for which no initialization is performed
      < a definition of a variable of non-literal type
      < a definition of a variable of static or thread storage duration
      
    #  a function body that is =default or =delete contains none of the above
    #  for non-const constexpr methods :
         A constexpr specifier used in an object declaration or non-static member function implies const.
	 A constexpr specifier used in a function or static data member(c++17) declaration implies inline.
	 If andy declaration of a function or function template has a constexpr specifier,then every declaration
	 must contain that specifier.


      



    
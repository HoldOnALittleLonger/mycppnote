C++14
    C++14 is a minor version after the major version C++11,featuring mainly minor improvements and defect fixes.

> Variable template :
    A variable template defines a family of variables or static data members.
    Syntax:
      template<parameter-list> variable-declaration;

      variable-declaration :
        a declaration of a variable,the declared variable name becomes a template name.

      parameter-list :
        a non-empty comma-separated list of the template parameters,each of which is either non-type parameter,
	a type parameter,a template parameter,or a parameter pack of any of those.

    A variable instantiated from a variable template is called an instantiated variable.
    A static data member instantiated from a static data member template is called an instantiated static data member.
    A variable template may be introduced by a template declaration at namespace scope,where variable-declaration declares
    a variable.
    #  class static data member template is defined outside the class definition.


    E.g. :
      template<class T>			//  constant template
      constexpr T pi = T(3.1415926L);

      return pi<float> * 2;

      template<class _CType>		//  alias template
      using vec = std::vector<_CType>;

      vec<std::string> s_vec;

      template<class _CType>		//  variable template ::(global namespace)
      std::vector<_CType> vec;	
      std::vector<int> *pVec1 = &vec<int>;
      std::vector<int> *pVec2 = &vec<int>;

      //  pVec1 == pVec2

      #  A template declaration of a static data member at namespace scope may also be a definition of a non-template 
      #  data member of a class template

      struct A {
        template<typename T> static const T min;  //  declaration  A::(namespace scope)
			     	    	    	  //  definition of a static data member must outside of class definition
      };
      template<class T>
      const T A::min = { };			  //  definition

    #  variable template is implicitly instantiated when a specialization of the variable template is referenced in
    #  a context that requires a variable definition to exist or if the existence of the definition affects the 
    #  semantics of the program (if the variable is needed for constant evaluation by an expression).


> generic lambda expression :
    generic lambda expresson depend on ClosureType.
    syntax :
      [captures] <template-parameters> requires(optional) (arguments) specs requires(optional) { body };
      [captures] <template-parameters> requires(optional) { body };
      [captures] <template-parameters> requires(optional) specs { body };

      specs : consists of specifiers,exception,attributes and trailing-return-type in that order;
      	      each of these is optional.

    usage : 
      int i = 3, j = 4;
      auto tf = [=] <class _T> requires std::floating_point<_T> (_T x) -> _T
        {
	  return (i + j) * x;
	};  /*  for restrict template,could use concept  */
      
      return tf(3.5);

    members of ClosureType :
      //  they cant be explicitly instantiated,explicitly specialized or
      //  (since c++14)named in a friend declaration.

      ret ClosureType::operator()(params);
      template<template-params>
      ret ClosureType::operator()(params);

      ClosureType::operator ret(*)(params)();
      E.g.
        capture-less non-generic lambda :
	  using F = ret(*)(params);	/*  until c++17  */
	  operator F() const noexcept;

	  using F = ret(*)(params);	/*  since c++17  */
	  constexpr operator F() const noexcept;

	capture-less generic lambda :
	  template<template-params> using fptr_t = ret(*)(params);  /*  since c++14,until c++17  */
	  template<template-params> operator fptr_t<template-params>() const noexcept;

	  template<template-params> using fptr_t = ret(*)(params);  /*  since c++17  */
	  template<template-params> constexpr operator fptr_t<template-params>() const noexcept;

      #  a generic captureless lambda has a user-defined conversion function template with the
         same invented template parameter list as the function-call operator template.
	 if the return type is empty or auto,it is obtained by return type deduction on the 
	 function template specialization,which,in turn,is obtained by template argument deduction
	 for conversion function templates.


      ClosureType::ClosureType() =default;  /*  since c++20,only if no captures are specified  */
      ClosureType::ClosureType(const ClosureType &) =default;
      ClosureType::ClosureType(ClosureType &&) =default;

      #  ClosureType have no constructor in c++14
      #  copy-constructor and move-constructor of ClosureType is implicitly defined by compiler.

      ClosureType &ClosureType::operator=(const ClosureType &) =delete;  /*  until c++20  */

      ClosureType &ClosureType::operator=(const ClosureType &) =default;  /*  since c++20,only if no captures are specified  */
      ClosureType &ClosureType::operator=(ClosureType &&) = default;  /*  since c++20,only if no captures are specified  */
      ClosureType &ClosureType::operator=(const ClosureType &) =delete;  /*  since c++20,if have captrues were specified  */

      ClosureType::~ClosureType();

      ClosureType::<Captures>;


    #  lambda expression could be default value to function argument,but it must be no captures or all 
       captures have initializers. (since c++14)
       E.g.
         int x = 3, y = 4;
         void func1(int (*fp = ([x = 1, y = 2](int) -> int { ... }))(int)();
	 //  even x and y had been declared,the noname lambda expression cant captures them.


> lamabda init-capture (concept)
    init-capture also called "generalized lambda captures",which allow to specify,in the capture brackets :
      the NAME of a data member in the closure class generated from the lambda
      an EXPRESSION INITIALIZEING that data member

    syntax :
      [capture = rvalue] () { <body> };

      E.g.
        auto pUnique = std::make_unique(5);
	auto lambda = [ p = std::move(pUnique) ] () { return *p + 5; };

	#  this will basically move the pointer object into the data member 'p' of the closure class created
	   from the lambda.  // auto p = std::move(pUnique); ClosureType lambda.p
	#  std::bind is posibility to emulate the move capture
	     auto pUnique = std::make_unique(5);
	     auto lambda = std::bind([] (const std::unique_ptr &p) { return *p + 5; }, std::move(pUnique));


> new/delete elision
    syntax :
      ::(optional) new (type) initializer(optional)
      ::(optional) new new-type initializer(optional)
      ::(optional) new (placement-params) (type) initializer(optional)
      ::(optional) new (placement-params) new-type initializer(optional)

      type : type-id,which may be array type,and may include a placeholdertype specifier(c++11),or inlcude a class template name
             whose argument is to be deduced by class template argument deduction.
	     placeholdertype : auto | decltype (auto)

      new-type : same as type,but is cannot include parentheses
      	         additional : new-type is greedy,it will include every token that can be a part of a declarator.
		 E.g.
		   new int + 1;  //  parsed as (new int) + 1,but cant be "new int * 1;"

      placement-params : a buffer where new allocate memory for the object.
      		         E.g.
			   char buffer[256];
			   auto i = new (buffer) int(16);  //  allocate memory from buffer and init *i as 16.
			   	    		 	   //  type of i would be automatically deduced to int pointer.

      initializer : it is not optional if 
      		      type or new-type is an array of unknown bound;
		      a placeholder is used in type or new-type,that is,auto or decltype(auto),possibly combined with
		      a type constraint;
		      a class template is used in type or new-type whose arguments need to be deduced;

      #  new would automatically adjust alignment via std::align_val_t()
         new int == new(sizeof(int), std::align_val_t(alignof(int)))  //  operator new()
	 //  overhead would effective when allocate an array. new(sizeof(Type) + overhead, std::align_val_t(alignof(Type)))

      #  delete should combined a part with new,
         delete[] should combined a part with new[]


> relaxed restrictions on constexpr functions
    the function body must not contain :
      < a goto statement
      < a statement with a label other than case and default
      < a try-block
      < an asm declaration
      < a definition of a variable for which no initialization is performed
      < a definition of a variable of non-literal type
      < a definition of a variable of static or thread storage duration
      
    #  a function body that is =default or =delete contains none of the above
    #  for non-const constexpr methods :
         A constexpr specifier used in an object declaration or non-static member function implies const.
	 A constexpr specifier used in a function or static data member(c++17) declaration implies inline.
	 If andy declaration of a function or function template has a constexpr specifier,then every declaration
	 must contain that specifier.


> binary literals AND digit separator
    the integer literal form :
      decimal-literal integer-suffix
      octal-literal integer-suffix
      hex-literal integer-suffix
      binary-literal integer-suffix

      integer-suffix : unsigned-suffix u|U[std::size_t(c++23)]
      		       long-suffix l|L
		       long-long-suffix ll|LL(c++11)
		       size-suffix z|Z[std::size_t](c++23)

      #  binary-literal is the character sequence 0b or the character sequence 0B followed by one or more binary digits
      	 0b01101111
	 0B11111111

      #  literal is rvalue.
      #  letters in the integer literals are case-insensitive
      	 0xabcd == 0xABCD == 0xaBcD

    digit separator : (c++14)
      optional single quotes(') may be inserted between the digits as a separator,they are ignored during compilation.
      E.g.
        int x = 123'000;


> function return type deducation
    if the decl-specifier-seq of the function declaration contains the keyword auto,trailing return type may be omitted,
    and will be deduced by the compiler from the type of the expression used in the return statement.if the return type
    does not use decltype(auto),the deducation follows the rules of template argument deduction.

    usage :
      auto func(void) { return 3; }  //  return type of func() would be automatically deduced to int

    //  "const decltype(auto)&" is an error,decltype(auto) must be used on its own
    //  if there are multiple return statements,they must all deduce to the same type.
        e.g.
	  auto func(void) { if 1 > 0 return 1; return 1.2; }
	  //  error,return type cant is float and int.

    //  no return statement or the argument of the return statement is a void expression,the declared return type
        must be either decltype(auto) {1> void or auto || 2> void}

    //  compiler automatically deduce only occur at the time that first return statement was found.

    the cases allow to use return type deduction :
      1>  function template
      2>  user-defined conversion function
      3>  general function

      #  virtual function and coroutines dont allow to use return type deduction.
      #  braced-init-list return statement dont allow to use return type deduction.

    //  redeclarations or specializations of functions or function templates that use return type deduction must
        use the same return type placeholders.
    //  explicit instantiation declarations do not themselves instantiate function templates that use return
        type deduction.
	e.g.
	  template<typename T>
	  auto func(T i) { return i; }
	  extern template auto func(int);  //  does not instantiate f<int>

	  int (*p)(int) = f;  //  instantiates f<int> to determine its return type.


> aggregate initialization
    initializes an aggregate from an initializer list,it is a form of list-initialization.      
    
    syntax :
      T object = {arg1, arg2, arg3, ...};
      T object{arg1, arg2, ...};
      T object = {.des1 = arg1, .des2{arg2}, ...};
      T object{.des1 = arg1, .des2{arg2}, ...};

      1,2>  initializing an aggregate with an ordinary initializer list.
      3,4>  initializing an aggregate with designated initializers(aggregate class only)

    an aggregate is one of the following types :
      array type
      class type(typically,struct or union),that has
        no user-declared constructors  (until c++11)
	no user-provided,inherited,or explicit constructors  (since c++11,until c++20)
	no user-declared or inherited constructors  (since c++20)
	no private or protected direct(c++17) non-static data members
	no base classes  (until c++17)
	no virtual base classes  (--
	no private or protected direct base classes  (--  since c++17)
	no virtual member functions
	no default member initializers  (since c++11,until c++14)

    the elements of an aggregate are :
      for an array,the array elements in increasing subscript order.
      (until c++17) for a class,the non-static data members that are not anonymous bit-fields,in declaration order.
      (since c++17) for a class,the direct base classes in declaration order,followed by the direct non-static data members that
      	     	    are neither anonymous bit-fields nor members of an anonymous union,in declaration order.

    #  designated initializer :
         struct A { int a; int b; int c; };
	 struct A a = {
	   .b = 4,
	   .a = 3,
	   .c = 5
	 };  //  such initializer was often occurred in linux kernel code.


> smart pointer producter
    std::make_unique , std::make_unique_for_overwrite :
      <memory>

      //  only for non-array types. since c++14 until c++23
      template<class T, class... Args>
      unique_ptr<T> make_unique(Args&&... args);
      template<class T, class... Args>
      constexpr unique_ptr<T> make_unique<Args&&... args);

      //  only for array types with unknown bound. since c++14 until c++23
      template<class T>
      unique_ptr<T> make_unique(std::size_t size);
      template<class T>
      constexpr unique_ptr<T> make_unique(std::size_t size);

      //  only for non-array types. since c++20 until c++23
      template<class T>
      unique_ptr<T> make_unique_for_overwrite();
      template<class T>
      constexpr unique_ptr<T> make_unique_for_overwrite();

      //  only for array types with unknown bound. since c++20 until c++23
      template<class T>
      unique_ptr<T> make_unique_for_overwrite(std::size_t size);
      template<class T>
      constexpr unique_ptr<T> make_unique_for_overwriter(std::size_t size);

      make_unique() constructs an object of type T and wraps it in a std::unique_ptr.
      if make_unique() received template-parameter pack,then it use these parameters to constructs
      object of type T via its constructor.
      for array types,it takes a size to allocate memory length is equivalent to sizeof(T) * size.

      //  the function is equivalent to :
          unique_ptr<T>(new T(std::forward<Args>(args)...));


    std::make_shared , std::make_shared_for_overwrite :
      <memory>
      
      //  since c++11, T is not array
      template<class T, class... Args>
      shared_ptr<T> make_shared(Args&&... args);

      //  since c++20, T is U[]
      template<class T>
      shared_ptr<T> make_shared(std::size_t N);

      //  since c++20, T is U[N]
      template<class T>
      shared_ptr<T> make_shared();

      //  since c++20, T is not U[]
      template<class T>
      shared_ptr<T> make_shared_for_overwrite();

      //  since c++20, T is U[]
      template<class T>
      shared_ptr<T> make_shared_for_overwrite(std::size_t N);

      make_shared() is similiar with make_unique(),but it constructs std::shared_ptr object.

    Usage :
      std::make_unique()  --

        std::unique_ptr<int> uP = std::make_unique<int>(3);
	//  uP would automatically destructed after exit current block

      std::make_shared()  --
      
        std::shared_ptr<int> sP = std::make_shared<int>(3);
	std::shared_ptr<int> sPa(sP);
	//  sP,sPa would automatically destructed after exit current block